{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDh4WjkqY18xBnxJpvI0WBkaVXbD-dVRRQ\",\n  authDomain: \"myreactapp-3ec0a.firebaseapp.com\",\n  projectId: \"myreactapp-3ec0a\",\n  storageBucket: \"myreactapp-3ec0a.appspot.com\",\n  messagingSenderId: \"247444034531\",\n  appId: \"1:247444034531:web:1900e03f3f1bf2f46946d6\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth(); //popup google auth\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider); //redirect google auth\n\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocFromAuth = async userAuth => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists()); //if user data does not exist - create/set doc with the data from userAuth in my collection\n  //if user data exists - return userDocRef\n\n  if (!userSnapshot.exists()) {\n    let {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (err) {\n      console.log(\"Error creating the user\", err.message);\n    }\n  }\n\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","err","message"],"sources":["/Users/astefaneseibogdan/Desktop/ABOUT-YOU2.0_PHASE1/about-you2.0/src/utilities/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from \"firebase/auth\";\n\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDh4WjkqY18xBnxJpvI0WBkaVXbD-dVRRQ\",\n  authDomain: \"myreactapp-3ec0a.firebaseapp.com\",\n  projectId: \"myreactapp-3ec0a\",\n  storageBucket: \"myreactapp-3ec0a.appspot.com\",\n  messagingSenderId: \"247444034531\",\n  appId: \"1:247444034531:web:1900e03f3f1bf2f46946d6\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\n\n//popup google auth\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n//redirect google auth\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocFromAuth = async (userAuth) => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exist - create/set doc with the data from userAuth in my collection\n  //if user data exists - return userDocRef\n  if (!userSnapshot.exists()) {\n    let { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, { displayName, email, createdAt });\n    } catch (err) {\n      console.log(\"Error creating the user\", err.message);\n    }\n  }\n  return userDocRef;\n};\n"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B,C,CACA;AACA;;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,QAKO,eALP;AAOA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,kCAFS;EAGrBC,SAAS,EAAE,kBAHU;EAIrBC,aAAa,EAAE,8BAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,GAAG,GAAGhB,aAAa,CAACS,cAAD,CAAzB;AACA,MAAMQ,QAAQ,GAAG,IAAIb,kBAAJ,EAAjB;AAEAa,QAAQ,CAACC,mBAAT,CAA6B;EAC3BC,MAAM,EAAE;AADmB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAApB,C,CAEP;;AACA,OAAO,MAAMoB,qBAAqB,GAAG,MAAMlB,eAAe,CAACiB,IAAD,EAAOH,QAAP,CAAnD,C,CAEP;;AACA,OAAO,MAAMK,wBAAwB,GAAG,MACtCpB,kBAAkB,CAACkB,IAAD,EAAOH,QAAP,CADb;AAGP,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAvB;AAEP,OAAO,MAAMmB,qBAAqB,GAAG,MAAOC,QAAP,IAAoB;EACvD,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;EAEAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;EAEA,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAD,CAAjC;EACAE,OAAO,CAACC,GAAR,CAAYC,YAAZ;EACAF,OAAO,CAACC,GAAR,CAAYC,YAAY,CAACC,MAAb,EAAZ,EAPuD,CASvD;EACA;;EACA,IAAI,CAACD,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B,IAAI;MAAEC,WAAF;MAAeC;IAAf,IAAyBR,QAA7B;IACA,MAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IACA,IAAI;MACF,MAAM3B,MAAM,CAACkB,UAAD,EAAa;QAAEM,WAAF;QAAeC,KAAf;QAAsBC;MAAtB,CAAb,CAAZ;IACD,CAFD,CAEE,OAAOE,GAAP,EAAY;MACZR,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCO,GAAG,CAACC,OAA3C;IACD;EACF;;EACD,OAAOX,UAAP;AACD,CArBM"},"metadata":{},"sourceType":"module"}